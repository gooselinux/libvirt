From 68a84df247fcc17ecc78be759001ac5747be12e4 Mon Sep 17 00:00:00 2001
Message-Id: <68a84df247fcc17ecc78be759001ac5747be12e4.1302097027.git.jdenemar@redhat.com>
From: Jiri Denemark <jdenemar@redhat.com>
Date: Wed, 6 Apr 2011 13:25:24 +0200
Subject: [PATCH] qemu: Support for overriding NPROC limit

https://bugzilla.redhat.com/show_bug.cgi?id=674602

This patch adds max_processes option to qemu.conf which can be used to
override system default limit on number of processes that are allowed to
be running for qemu user.
(cherry picked from commit 87e78b2bc0a9315779b0ed1821c96dafa5e8bad5)

Conflicts:

	src/qemu/qemu_process.c - code moved from qemu_driver.c
---
 src/qemu/libvirtd_qemu.aug      |    3 +++
 src/qemu/qemu.conf              |    7 +++++++
 src/qemu/qemu_conf.c            |    4 ++++
 src/qemu/qemu_conf.h            |    2 ++
 src/qemu/qemu_driver.c          |   24 ++++++++++++++++++++++++
 src/qemu/test_libvirtd_qemu.aug |    4 ++++
 6 files changed, 44 insertions(+), 0 deletions(-)

diff --git a/src/qemu/libvirtd_qemu.aug b/src/qemu/libvirtd_qemu.aug
index affd74e..ac30b8e 100644
--- a/src/qemu/libvirtd_qemu.aug
+++ b/src/qemu/libvirtd_qemu.aug
@@ -13,11 +13,13 @@ module Libvirtd_qemu =
 
    let str_val = del /\"/ "\"" . store /[^\"]*/ . del /\"/ "\""
    let bool_val = store /0|1/
+   let int_val = store /[0-9]+/
    let str_array_element = [ seq "el" . str_val ] . del /[ \t\n]*/ ""
    let str_array_val = counter "el" . array_start . ( str_array_element . ( array_sep . str_array_element ) * ) ? . array_end
 
    let str_entry       (kw:string) = [ key kw . value_sep . str_val ]
    let bool_entry      (kw:string) = [ key kw . value_sep . bool_val ]
+   let int_entry       (kw:string) = [ key kw . value_sep . int_val ]
    let str_array_entry (kw:string) = [ key kw . value_sep . str_array_val ]
 
 
@@ -45,6 +47,7 @@ module Libvirtd_qemu =
                  | bool_entry "clear_emulator_capabilities"
                  | bool_entry "allow_disk_format_probing"
                  | bool_entry "set_process_name"
+                 | int_entry "max_processes"
 
    (* Each enty in the config is one of the following three ... *)
    let entry = vnc_entry
diff --git a/src/qemu/qemu.conf b/src/qemu/qemu.conf
index df99f60..6e15b66 100644
--- a/src/qemu/qemu.conf
+++ b/src/qemu/qemu.conf
@@ -272,3 +272,10 @@
 # its arguments) appear in process listings.
 #
 # set_process_name = 1
+
+
+# If max_processes is set to a positive integer, libvirt will use it to set
+# maximum number of processes that can be run by qemu user. This can be used to
+# override default value set by host OS.
+#
+# max_processes = 0
diff --git a/src/qemu/qemu_conf.c b/src/qemu/qemu_conf.c
index 9ba60b1..bb5421b 100644
--- a/src/qemu/qemu_conf.c
+++ b/src/qemu/qemu_conf.c
@@ -424,6 +424,10 @@ int qemudLoadDriverConfig(struct qemud_driver *driver,
     CHECK_TYPE ("set_process_name", VIR_CONF_LONG);
     if (p) driver->setProcessName = p->l;
 
+    p = virConfGetValue(conf, "max_processes");
+    CHECK_TYPE("max_processes", VIR_CONF_LONG);
+    if (p) driver->maxProcesses = p->l;
+
     virConfFree (conf);
     return 0;
 }
diff --git a/src/qemu/qemu_conf.h b/src/qemu/qemu_conf.h
index a9f2696..df29f47 100644
--- a/src/qemu/qemu_conf.h
+++ b/src/qemu/qemu_conf.h
@@ -106,6 +106,8 @@ struct qemud_driver {
     unsigned int allowDiskFormatProbing : 1;
     unsigned int setProcessName : 1;
 
+    int maxProcesses;
+
     virCapsPtr caps;
 
     /* An array of callbacks */
diff --git a/src/qemu/qemu_driver.c b/src/qemu/qemu_driver.c
index c37541e..43ba190 100644
--- a/src/qemu/qemu_driver.c
+++ b/src/qemu/qemu_driver.c
@@ -46,6 +46,8 @@
 #include <sys/un.h>
 #include <gnutls/gnutls.h>
 #include <gnutls/x509.h>
+#include <sys/time.h>
+#include <sys/resource.h>
 
 
 #include "virterror_internal.h"
@@ -2990,6 +2992,25 @@ qemuPrepareChardevDevice(virDomainDefPtr def ATTRIBUTE_UNUSED,
 }
 
 
+static int
+qemuProcessLimits(struct qemud_driver *driver)
+{
+    if (driver->maxProcesses > 0) {
+        struct rlimit rlim;
+
+        rlim.rlim_cur = rlim.rlim_max = driver->maxProcesses;
+        if (setrlimit(RLIMIT_NPROC, &rlim) < 0) {
+            virReportSystemError(errno,
+                                 _("cannot limit number of processes to %d"),
+                                 driver->maxProcesses);
+            return -1;
+        }
+    }
+
+    return 0;
+}
+
+
 struct qemudHookData {
     virConnectPtr conn;
     virDomainObjPtr vm;
@@ -2999,6 +3020,9 @@ struct qemudHookData {
 static int qemudSecurityHook(void *data) {
     struct qemudHookData *h = data;
 
+    if (qemuProcessLimits(h->driver) < 0)
+        return -1;
+
     /* This must take place before exec(), so that all QEMU
      * memory allocation is on the correct NUMA node
      */
diff --git a/src/qemu/test_libvirtd_qemu.aug b/src/qemu/test_libvirtd_qemu.aug
index 8e477f5..917bd4f 100644
--- a/src/qemu/test_libvirtd_qemu.aug
+++ b/src/qemu/test_libvirtd_qemu.aug
@@ -111,6 +111,8 @@ clear_emulator_capabilities = 0
 allow_disk_format_probing = 1
 
 vnc_auto_unix_socket = 1
+
+max_processes = 12345
 "
 
    test Libvirtd_qemu.lns get conf =
@@ -232,3 +234,5 @@ vnc_auto_unix_socket = 1
 { "allow_disk_format_probing" = "1" }
 { "#empty" }
 { "vnc_auto_unix_socket" = "1" }
+{ "#empty" }
+{ "max_processes" = "12345" }
-- 
1.7.4.1

