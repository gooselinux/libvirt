From 66aeea83526209fcc51a04fbc835cad6d6eeed53 Mon Sep 17 00:00:00 2001
Message-Id: <66aeea83526209fcc51a04fbc835cad6d6eeed53.1299776672.git.jdenemar@redhat.com>
From: Eric Blake <eblake@redhat.com>
Date: Thu, 10 Mar 2011 08:48:24 -0700
Subject: [PATCH] qemu: support vhost in attach-interface

https://bugzilla.redhat.com/show_bug.cgi?id=683276

* src/qemu/qemu_hotplug.c (qemuDomainAttachNetDevice): Honor vhost
designations, similar to qemu_command code paths.
* src/qemu/qemu_command.h (qemuOpenVhostNet): New prototype.
* src/qemu/qemu_command.c (qemuOpenVhostNet): Export.
(cherry picked from commit 5d091513414b3258ab937bf288db32724444ff47)

Conflicts:

	src/qemu/qemu_hotplug.c - upstream qemuCmdFlags refactor
	src/qemu/qemu_command.h - upstream qemuCmdFlags refactor
---
 src/qemu/qemu_command.c |    3 +--
 src/qemu/qemu_command.h |    4 ++++
 src/qemu/qemu_hotplug.c |   40 +++++++++++++++++++++++++++++++++++-----
 3 files changed, 40 insertions(+), 7 deletions(-)

diff --git a/src/qemu/qemu_command.c b/src/qemu/qemu_command.c
index 53e4641..3640e9b 100644
--- a/src/qemu/qemu_command.c
+++ b/src/qemu/qemu_command.c
@@ -303,12 +303,11 @@ cleanup:
 }
 
 
-static int
+int
 qemuOpenVhostNet(virDomainNetDefPtr net,
                  unsigned long long qemuCmdFlags,
                  int *vhostfd)
 {
-
     *vhostfd = -1;   /* assume we won't use vhost */
 
     /* If the config says explicitly to not use vhost, return now */
diff --git a/src/qemu/qemu_command.h b/src/qemu/qemu_command.h
index 8135046..e4e789f 100644
--- a/src/qemu/qemu_command.h
+++ b/src/qemu/qemu_command.h
@@ -125,6 +125,10 @@ int qemuPhysIfaceConnect(virConnectPtr conn,
                          const unsigned char *vmuuid,
                          enum virVMOperationType vmop);
 
+int qemuOpenVhostNet(virDomainNetDefPtr net,
+                     unsigned long long qemuCmdFlags,
+                     int *vhostfd);
+
 int qemudCanonicalizeMachine(struct qemud_driver *driver,
                              virDomainDefPtr def);
 
diff --git a/src/qemu/qemu_hotplug.c b/src/qemu/qemu_hotplug.c
index 46b8fe6..0fdd17c 100644
--- a/src/qemu/qemu_hotplug.c
+++ b/src/qemu/qemu_hotplug.c
@@ -570,6 +570,8 @@ int qemuDomainAttachNetDevice(virConnectPtr conn,
     qemuDomainObjPrivatePtr priv = vm->privateData;
     char *tapfd_name = NULL;
     int tapfd = -1;
+    char *vhostfd_name = NULL;
+    int vhostfd = -1;
     char *nicstr = NULL;
     char *netstr = NULL;
     int ret = -1;
@@ -594,6 +596,8 @@ int qemuDomainAttachNetDevice(virConnectPtr conn,
 
         if ((tapfd = qemuNetworkIfaceConnect(conn, driver, net, qemuCmdFlags)) < 0)
             return -1;
+        if (qemuOpenVhostNet(net, qemuCmdFlags, &vhostfd) < 0)
+            goto cleanup;
     } else if (net->type == VIR_DOMAIN_NET_TYPE_DIRECT) {
         if (priv->monConfig->type != VIR_DOMAIN_CHR_TYPE_UNIX) {
             qemuReportError(VIR_ERR_CONFIG_UNSUPPORTED,
@@ -608,6 +612,8 @@ int qemuDomainAttachNetDevice(virConnectPtr conn,
                                           vm->def->uuid,
                                           VIR_VM_OP_CREATE)) < 0)
             return -1;
+        if (qemuOpenVhostNet(net, qemuCmdFlags, &vhostfd) < 0)
+            goto cleanup;
     }
 
     if (VIR_REALLOC_N(vm->def->nets, vm->def->nnets+1) < 0)
@@ -654,15 +660,32 @@ int qemuDomainAttachNetDevice(virConnectPtr conn,
         }
     }
 
-    /* FIXME - need to support vhost-net here (5th arg) */
+    if (vhostfd != -1) {
+        if (virAsprintf(&vhostfd_name, "vhostfd-%s", net->info.alias) < 0)
+            goto no_memory;
+
+        qemuDomainObjEnterMonitorWithDriver(driver, vm);
+        if (qemuMonitorSendFileHandle(priv->mon, vhostfd_name, vhostfd) < 0) {
+            qemuDomainObjExitMonitorWithDriver(driver, vm);
+            goto try_tapfd_close;
+        }
+        qemuDomainObjExitMonitorWithDriver(driver, vm);
+
+        if (!virDomainObjIsActive(vm)) {
+            qemuReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+                            _("guest unexpectedly quit"));
+            goto cleanup;
+        }
+    }
+
     if ((qemuCmdFlags & QEMUD_CMD_FLAG_NETDEV) &&
         (qemuCmdFlags & QEMUD_CMD_FLAG_DEVICE)) {
         if (!(netstr = qemuBuildHostNetStr(net, ',',
-                                           -1, tapfd_name, 0)))
+                                           -1, tapfd_name, vhostfd_name)))
             goto try_tapfd_close;
     } else {
         if (!(netstr = qemuBuildHostNetStr(net, ' ',
-                                           vlan, tapfd_name, 0)))
+                                           vlan, tapfd_name, vhostfd_name)))
             goto try_tapfd_close;
     }
 
@@ -684,6 +707,7 @@ int qemuDomainAttachNetDevice(virConnectPtr conn,
     qemuDomainObjExitMonitorWithDriver(driver, vm);
 
     VIR_FORCE_CLOSE(tapfd);
+    VIR_FORCE_CLOSE(vhostfd);
 
     if (!virDomainObjIsActive(vm)) {
         qemuReportError(VIR_ERR_INTERNAL_ERROR, "%s",
@@ -738,6 +762,8 @@ cleanup:
     VIR_FREE(netstr);
     VIR_FREE(tapfd_name);
     VIR_FORCE_CLOSE(tapfd);
+    VIR_FREE(vhostfd_name);
+    VIR_FORCE_CLOSE(vhostfd);
 
     return ret;
 
@@ -777,10 +803,14 @@ try_tapfd_close:
     if (!virDomainObjIsActive(vm))
         goto cleanup;
 
-    if (tapfd_name) {
+    if (tapfd_name || vhostfd_name) {
         qemuDomainObjEnterMonitorWithDriver(driver, vm);
-        if (qemuMonitorCloseFileHandle(priv->mon, tapfd_name) < 0)
+        if (tapfd_name &&
+            qemuMonitorCloseFileHandle(priv->mon, tapfd_name) < 0)
             VIR_WARN("Failed to close tapfd with '%s'", tapfd_name);
+        if (vhostfd_name &&
+            qemuMonitorCloseFileHandle(priv->mon, vhostfd_name) < 0)
+            VIR_WARN("Failed to close vhostfd with '%s'", vhostfd_name);
         qemuDomainObjExitMonitorWithDriver(driver, vm);
     }
 
-- 
1.7.4.1

