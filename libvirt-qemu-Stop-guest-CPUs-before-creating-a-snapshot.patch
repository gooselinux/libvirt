From 5df827548a064ed7a1d899849c57fc91ff4f5028 Mon Sep 17 00:00:00 2001
Message-Id: <5df827548a064ed7a1d899849c57fc91ff4f5028.1299776671.git.jdenemar@redhat.com>
From: Jiri Denemark <jdenemar@redhat.com>
Date: Thu, 24 Feb 2011 16:46:44 +0100
Subject: [PATCH] qemu: Stop guest CPUs before creating a snapshot

https://bugzilla.redhat.com/show_bug.cgi?id=589076

(cherry picked from commit 346236fea97602e9e6529c5d41a32ed26b126082)
---
 src/qemu/qemu_driver.c |   37 ++++++++++++++++++++++++++++++++-----
 1 files changed, 32 insertions(+), 5 deletions(-)

diff --git a/src/qemu/qemu_driver.c b/src/qemu/qemu_driver.c
index fbb00ad..0b1e8ba 100644
--- a/src/qemu/qemu_driver.c
+++ b/src/qemu/qemu_driver.c
@@ -10162,21 +10162,47 @@ cleanup:
 
 /* The domain is expected to be locked and active. */
 static int
-qemuDomainSnapshotCreateActive(struct qemud_driver *driver,
+qemuDomainSnapshotCreateActive(virConnectPtr conn,
+                               struct qemud_driver *driver,
                                virDomainObjPtr *vmptr,
                                virDomainSnapshotObjPtr snap)
 {
     virDomainObjPtr vm = *vmptr;
     qemuDomainObjPrivatePtr priv = vm->privateData;
-    int ret;
+    bool resume = false;
+    int ret = -1;
 
     if (qemuDomainObjBeginJobWithDriver(driver, vm) < 0)
         return -1;
 
+    if (vm->state == VIR_DOMAIN_RUNNING) {
+        /* savevm monitor command pauses the domain emitting an event which
+         * confuses libvirt since it's not notified when qemu resumes the
+         * domain. Thus we stop and start CPUs ourselves.
+         */
+        if (doStopCPUs(driver, vm) < 0)
+            goto cleanup;
+
+        resume = true;
+        if (!virDomainObjIsActive(vm)) {
+            qemuReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+                            _("guest unexpectedly quit"));
+            goto cleanup;
+        }
+    }
+
     qemuDomainObjEnterMonitorWithDriver(driver, vm);
     ret = qemuMonitorCreateSnapshot(priv->mon, snap->def->name);
     qemuDomainObjExitMonitorWithDriver(driver, vm);
 
+cleanup:
+    if (resume && virDomainObjIsActive(vm) &&
+        doStartCPUs(driver, vm, conn) < 0 &&
+        virGetLastError() == NULL) {
+        qemuReportError(VIR_ERR_OPERATION_FAILED, "%s",
+                        _("resuming after snapshot failed"));
+    }
+
     if (qemuDomainObjEndJob(vm) == 0)
         *vmptr = NULL;
 
@@ -10221,18 +10247,19 @@ static virDomainSnapshotPtr qemuDomainSnapshotCreateXML(virDomainPtr domain,
     if (!(snap = virDomainSnapshotAssignDef(&vm->snapshots, def)))
         goto cleanup;
 
+    snap->def->state = vm->state;
+
     /* actually do the snapshot */
     if (!virDomainObjIsActive(vm)) {
         if (qemuDomainSnapshotCreateInactive(vm, snap) < 0)
             goto cleanup;
     }
     else {
-        if (qemuDomainSnapshotCreateActive(driver, &vm, snap) < 0)
+        if (qemuDomainSnapshotCreateActive(domain->conn, driver,
+                                           &vm, snap) < 0)
             goto cleanup;
     }
 
-    snap->def->state = vm->state;
-
     /* FIXME: if we fail after this point, there's not a whole lot we can
      * do; we've successfully taken the snapshot, and we are now running
      * on it, so we have to go forward the best we can
-- 
1.7.4.1

