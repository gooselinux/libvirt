From 60881161ea7c05a80af145582fc6659e69a20ef8 Mon Sep 17 00:00:00 2001
From: Daniel P. Berrange <berrange@redhat.com>
Date: Tue, 25 May 2010 15:33:51 +0100
Subject: [PATCH 1/3] Expose a host UUID in the capabilities XML

From: Stefan Berger <stefanb@us.ibm.com>

Allow for a host UUID in the capabilities XML. Local drivers
will initialize this from the SMBIOS data. If a sanity check
shows SMBIOS uuid is invalid, allow an override from the
libvirtd.conf configuration file

* daemon/libvirtd.c, daemon/libvirtd.conf: Support a host_uuid
  configuration option
* docs/schemas/capability.rng: Add optional host uuid field
* src/conf/capabilities.c, src/conf/capabilities.h: Include
  host UUID in XML
* src/libvirt_private.syms: Export new uuid.h functions
* src/lxc/lxc_conf.c, src/qemu/qemu_driver.c,
  src/uml/uml_conf.c: Set host UUID in capabilities
* src/util/uuid.c, src/util/uuid.h: Support for host UUIDs
* src/node_device/node_device_udev.c: Use the host UUID functions
* tests/confdata/libvirtd.conf, tests/confdata/libvirtd.out: Add
  new host_uuid config option to test
---
 daemon/libvirtd.c                  |    9 +++
 daemon/libvirtd.conf               |   13 ++++
 docs/schemas/capability.rng        |   16 +++++
 po/POTFILES.in                     |    1 +
 src/conf/capabilities.c            |    6 ++
 src/conf/capabilities.h            |    1 +
 src/libvirt_private.syms           |    2 +
 src/lxc/lxc_conf.c                 |   15 ++++-
 src/node_device/node_device_udev.c |    6 +--
 src/qemu/qemu_driver.c             |    6 ++
 src/uml/uml_conf.c                 |   14 +++-
 src/util/uuid.c                    |  116 ++++++++++++++++++++++++++++++++++++
 src/util/uuid.h                    |    5 ++
 tests/confdata/libvirtd.conf       |    9 +++
 tests/confdata/libvirtd.out        |    7 ++
 15 files changed, 213 insertions(+), 13 deletions(-)

diff -rupN b/daemon/libvirtd.c c/daemon/libvirtd.c
--- b/daemon/libvirtd.c	2010-05-25 16:22:50.604437715 -0400
+++ c/daemon/libvirtd.c	2010-05-25 16:36:03.643439646 -0400
@@ -57,6 +57,7 @@
 #include "dispatch.h"
 
 #include "util.h"
+#include "uuid.h"
 #include "remote_driver.h"
 #include "conf.h"
 #include "event.h"
@@ -2715,6 +2716,7 @@ remoteReadConfigFile (struct qemud_serve
     char *unix_sock_rw_perms = NULL;
     char *unix_sock_group = NULL;
     char *buf = NULL;
+    char *host_uuid = NULL;
 
 #if HAVE_POLKIT
     /* Change the default back to no auth for non-root */
@@ -2837,11 +2839,18 @@ remoteReadConfigFile (struct qemud_serve
     GET_CONF_INT (conf, filename, max_requests);
     GET_CONF_INT (conf, filename, max_client_requests);
 
+    GET_CONF_STR (conf, filename, host_uuid);
+    if (virSetHostUUIDStr(host_uuid))
+        goto free_and_fail;
+
+    VIR_FREE(host_uuid);
+
     virConfFree (conf);
     return 0;
 
  free_and_fail:
     virConfFree (conf);
+    VIR_FREE(host_uuid);
     VIR_FREE(mdns_name);
     VIR_FREE(unix_sock_ro_perms);
     VIR_FREE(unix_sock_rw_perms);
diff -rupN b/daemon/libvirtd.conf c/daemon/libvirtd.conf
--- b/daemon/libvirtd.conf	2010-03-26 05:50:45.000000000 -0400
+++ c/daemon/libvirtd.conf	2010-05-25 16:36:03.644463887 -0400
@@ -312,3 +312,16 @@
 # e.g.:
 # log_outputs="3:syslog:libvirtd"
 # to log all warnings and errors to syslog under the libvirtd ident
+
+# UUID of the host:
+# Provide the UUID of the host here in case the command
+# 'dmidecode -s system-uuid' does not provide a valid uuid. In case
+# 'dmidecode' does not provide a valid UUID and none is provided here, a
+# temporary UUID will be generated.
+# Keep the format of the example UUID below. UUID must not have all digits
+# be the same.
+
+# NB This default all-zeros UUID will not work. Replace
+# it with the output of the 'uuidgen' command and then
+# uncomment this entry
+#host_uuid = "00000000-0000-0000-0000-000000000000"
diff -rupN b/docs/schemas/capability.rng c/docs/schemas/capability.rng
--- b/docs/schemas/capability.rng	2010-03-02 03:21:09.000000000 -0500
+++ c/docs/schemas/capability.rng	2010-05-25 16:36:03.645448318 -0400
@@ -18,6 +18,11 @@
 
   <define name='hostcaps'>
     <element name='host'>
+      <optional>
+        <element name='uuid'>
+          <ref name='UUID'/>
+        </element>
+      </optional>
       <element name='cpu'>
         <element name='arch'>
           <ref name='archnames'/>
@@ -349,4 +354,15 @@
       <param name='pattern'>[a-zA-Z0-9\-_]+</param>
     </data>
   </define>
+
+  <define name="UUID">
+    <choice>
+      <data type="string">
+        <param name="pattern">[a-fA-F0-9]{32}</param>
+      </data>
+      <data type="string">
+        <param name="pattern">[a-fA-F0-9]{8}\-([a-fA-F0-9]{4}\-){3}[a-fA-F0-9]{12}</param>
+      </data>
+    </choice>
+  </define>
 </grammar>
diff -rupN b/po/POTFILES.in c/po/POTFILES.in
--- b/po/POTFILES.in	2010-04-26 11:20:26.000000000 -0400
+++ c/po/POTFILES.in	2010-05-25 16:36:03.647448191 -0400
@@ -28,6 +28,7 @@ src/interface/netcf_driver.c
 src/internal.h
 src/libvirt.c
 src/lxc/lxc_container.c
+src/lxc/lxc_conf.c
 src/lxc/lxc_controller.c
 src/lxc/lxc_driver.c
 src/network/bridge_driver.c
diff -rupN b/src/conf/capabilities.c c/src/conf/capabilities.c
--- b/src/conf/capabilities.c	2010-02-12 09:50:47.000000000 -0500
+++ c/src/conf/capabilities.c	2010-05-25 16:36:03.649438075 -0400
@@ -27,6 +27,7 @@
 #include "buf.h"
 #include "memory.h"
 #include "util.h"
+#include "uuid.h"
 #include "cpu_conf.h"
 
 /**
@@ -662,9 +663,14 @@ virCapabilitiesFormatXML(virCapsPtr caps
 {
     virBuffer xml = VIR_BUFFER_INITIALIZER;
     int i, j, k;
+    char host_uuid[VIR_UUID_STRING_BUFLEN];
 
     virBufferAddLit(&xml, "<capabilities>\n\n");
     virBufferAddLit(&xml, "  <host>\n");
+    if (virUUIDIsValid(caps->host.host_uuid)) {
+        virUUIDFormat(caps->host.host_uuid, host_uuid);
+        virBufferVSprintf(&xml,"    <uuid>%s</uuid>\n", host_uuid);
+    }
     virBufferAddLit(&xml, "    <cpu>\n");
     virBufferVSprintf(&xml, "      <arch>%s</arch>\n",
                       caps->host.arch);
diff -rupN b/src/conf/capabilities.h c/src/conf/capabilities.h
--- b/src/conf/capabilities.h	2010-03-18 08:30:07.000000000 -0400
+++ c/src/conf/capabilities.h	2010-05-25 16:36:03.650438291 -0400
@@ -110,6 +110,7 @@ struct _virCapsHost {
     virCapsHostNUMACellPtr *numaCell;
     virCapsHostSecModel secModel;
     virCPUDefPtr cpu;
+    unsigned char host_uuid[VIR_UUID_BUFLEN];
 };
 
 typedef struct _virCaps virCaps;
diff -rupN b/src/libvirt_private.syms c/src/libvirt_private.syms
--- b/src/libvirt_private.syms	2010-05-25 16:22:50.922437891 -0400
+++ c/src/libvirt_private.syms	2010-05-25 16:36:03.651448773 -0400
@@ -704,6 +704,8 @@ usbDeviceFileIterate;
 virUUIDFormat;
 virUUIDGenerate;
 virUUIDParse;
+virSetHostUUIDStr;
+virGetHostUUID;
 
 
 # virterror_internal.h
diff -rupN b/src/lxc/lxc_conf.c c/src/lxc/lxc_conf.c
--- b/src/lxc/lxc_conf.c	2010-02-10 04:23:29.000000000 -0500
+++ c/src/lxc/lxc_conf.c	2010-05-25 16:36:03.652687920 -0400
@@ -33,6 +33,7 @@
 #include "conf.h"
 #include "memory.h"
 #include "logging.h"
+#include "uuid.h"
 
 
 #define VIR_FROM_THIS VIR_FROM_LXC
@@ -48,7 +49,7 @@ virCapsPtr lxcCapsInit(void)
 
     if ((caps = virCapabilitiesNew(utsname.machine,
                                    0, 0)) == NULL)
-        goto no_memory;
+        goto error;
 
     /* Some machines have problematic NUMA toplogy causing
      * unexpected failures. We don't want to break the QEMU
@@ -59,6 +60,12 @@ virCapsPtr lxcCapsInit(void)
         VIR_WARN0("Failed to query host NUMA topology, disabling NUMA capabilities");
     }
 
+    if (virGetHostUUID(caps->host.host_uuid)) {
+        lxcError(VIR_ERR_INTERNAL_ERROR,
+                 "%s", _("cannot get the host uuid"));
+        goto error;
+    }
+
     /* XXX shouldn't 'borrow' KVM's prefix */
     virCapabilitiesSetMacPrefix(caps, (unsigned char []){ 0x52, 0x54, 0x00 });
 
@@ -70,7 +77,7 @@ virCapsPtr lxcCapsInit(void)
                                          NULL,
                                          0,
                                          NULL)) == NULL)
-        goto no_memory;
+        goto error;
 
     if (virCapabilitiesAddGuestDomain(guest,
                                       "lxc",
@@ -78,14 +85,14 @@ virCapsPtr lxcCapsInit(void)
                                       NULL,
                                       0,
                                       NULL) == NULL)
-        goto no_memory;
+        goto error;
 
     /* LXC Requires an emulator in the XML */
     virCapabilitiesSetEmulatorRequired(caps);
 
     return caps;
 
-no_memory:
+error:
     virCapabilitiesFree(caps);
     return NULL;
 }
diff -rupN b/src/node_device/node_device_udev.c c/src/node_device/node_device_udev.c
--- b/src/node_device/node_device_udev.c	2010-05-25 16:22:50.826438009 -0400
+++ c/src/node_device/node_device_udev.c	2010-05-25 16:36:03.654697570 -0400
@@ -1473,12 +1473,8 @@ udevGetDMIData(union _virNodeDevCapData 
         goto out;
     }
 
-    if (udevGetStringSysfsAttr(device,
-                               "product_uuid",
-                               &tmp) == PROPERTY_ERROR) {
+    if (virGetHostUUID(data->system.hardware.uuid))
         goto out;
-    }
-    virUUIDParse(tmp, data->system.hardware.uuid);
 
     if (udevGetStringSysfsAttr(device,
                                "bios_vendor",
diff -rupN b/src/qemu/qemu_driver.c c/src/qemu/qemu_driver.c
--- b/src/qemu/qemu_driver.c	2010-05-25 16:22:51.108438105 -0400
+++ c/src/qemu/qemu_driver.c	2010-05-25 16:36:03.671437928 -0400
@@ -1713,6 +1713,11 @@ qemuCreateCapabilities(virCapsPtr oldcap
     caps->privateDataXMLFormat = qemuDomainObjPrivateXMLFormat;
     caps->privateDataXMLParse = qemuDomainObjPrivateXMLParse;
 
+    if (virGetHostUUID(caps->host.host_uuid)) {
+        qemuReportError(VIR_ERR_INTERNAL_ERROR,
+                         "%s", _("cannot get the host uuid"));
+        goto err_exit;
+    }
 
     /* Security driver data */
     if (driver->securityPrimaryDriver) {
@@ -1734,6 +1739,7 @@ qemuCreateCapabilities(virCapsPtr oldcap
 
 no_memory:
     virReportOOMError();
+err_exit:
     virCapabilitiesFree(caps);
     return NULL;
 }
diff -rupN b/src/uml/uml_conf.c c/src/uml/uml_conf.c
--- b/src/uml/uml_conf.c	2010-04-06 09:27:40.000000000 -0400
+++ c/src/uml/uml_conf.c	2010-05-25 16:36:03.672438353 -0400
@@ -62,7 +62,7 @@ virCapsPtr umlCapsInit(void) {
 
     if ((caps = virCapabilitiesNew(utsname.machine,
                                    0, 0)) == NULL)
-        goto no_memory;
+        goto error;
 
     /* Some machines have problematic NUMA toplogy causing
      * unexpected failures. We don't want to break the QEMU
@@ -73,6 +73,12 @@ virCapsPtr umlCapsInit(void) {
         VIR_WARN0("Failed to query host NUMA topology, disabling NUMA capabilities");
     }
 
+    if (virGetHostUUID(caps->host.host_uuid)) {
+        umlReportError(VIR_ERR_INTERNAL_ERROR,
+                       "%s", _("cannot get the host uuid"));
+        goto error;
+    }
+
     if ((guest = virCapabilitiesAddGuest(caps,
                                          "uml",
                                          utsname.machine,
@@ -81,7 +87,7 @@ virCapsPtr umlCapsInit(void) {
                                          NULL,
                                          0,
                                          NULL)) == NULL)
-        goto no_memory;
+        goto error;
 
     if (virCapabilitiesAddGuestDomain(guest,
                                       "uml",
@@ -89,11 +95,11 @@ virCapsPtr umlCapsInit(void) {
                                       NULL,
                                       0,
                                       NULL) == NULL)
-        goto no_memory;
+        goto error;
 
     return caps;
 
- no_memory:
+ error:
     virCapabilitiesFree(caps);
     return NULL;
 }
diff -rupN b/src/util/uuid.c c/src/util/uuid.c
--- b/src/util/uuid.c	2010-03-18 08:30:08.000000000 -0400
+++ c/src/util/uuid.c	2010-05-25 16:36:03.673438080 -0400
@@ -38,11 +38,14 @@
 #include "util.h"
 #include "virterror_internal.h"
 #include "logging.h"
+#include "memory.h"
 
 #ifndef ENODATA
 # define ENODATA EIO
 #endif
 
+static unsigned char host_uuid[VIR_UUID_BUFLEN];
+
 static int
 virUUIDGenerateRandomBytes(unsigned char *buf,
                            int buflen)
@@ -208,3 +211,116 @@ void virUUIDFormat(const unsigned char *
              uuid[12], uuid[13], uuid[14], uuid[15]);
     uuidstr[VIR_UUID_STRING_BUFLEN-1] = '\0';
 }
+
+
+
+/**
+ * virUUIDIsValid
+ *
+ * @uuid: The UUID to test
+ *
+ * Do some basic tests to check whether the given UUID is
+ * valid as a host UUID.
+ * Basic tests:
+ *  - Not all of the digits may be equal
+ */
+int
+virUUIDIsValid(unsigned char *uuid)
+{
+    unsigned int i, ctr = 1;
+    unsigned char c;
+
+    if (!uuid)
+        return 0;
+
+    c = uuid[0];
+
+    for (i = 1; i < VIR_UUID_BUFLEN; i++)
+        if (uuid[i] == c)
+            ctr++;
+
+    return (ctr != VIR_UUID_BUFLEN);
+}
+
+static int
+getDMISystemUUID(char *uuid, int len)
+{
+    unsigned int i = 0;
+    const char *paths[] = {
+        "/sys/devices/virtual/dmi/id/product_uuid",
+        "/sys/class/dmi/id/product_uuid",
+        NULL
+    };
+
+    while (paths[i]) {
+        int fd = open(paths[i], O_RDONLY);
+        if (fd > 0) {
+            if (saferead(fd, uuid, len) == len) {
+                close(fd);
+                return 0;
+            }
+            close(fd);
+        }
+        i++;
+    }
+
+    return -1;
+}
+
+
+/**
+ * setHostUUID
+ *
+ * @host_uuid: UUID that the host is supposed to have
+ *
+ * Set the UUID of the host if it hasn't been set, yet
+ * Returns 0 in case of success, an error code in case of error.
+ */
+int
+virSetHostUUIDStr(const char *uuid)
+{
+    int rc;
+    char dmiuuid[VIR_UUID_STRING_BUFLEN];
+
+    if (virUUIDIsValid(host_uuid))
+        return EEXIST;
+
+    if (!uuid) {
+        if (!getDMISystemUUID(dmiuuid, sizeof(dmiuuid))) {
+            if (!virUUIDParse(dmiuuid, host_uuid))
+                return 0;
+        }
+
+        if (!virUUIDIsValid(host_uuid))
+            return virUUIDGenerate(host_uuid);
+    } else {
+        rc = virUUIDParse(uuid, host_uuid);
+        if (rc)
+            return rc;
+        if (!virUUIDIsValid(host_uuid))
+            return EINVAL;
+    }
+
+    return 0;
+}
+
+/**
+ * getHostUUID:
+ *
+ * @host_uuid: memory to store the host_uuid into
+ *
+ * Get the UUID of the host. Returns 0 in case of success,
+ * an error code otherwise.
+ * Returns 0 in case of success, an error code in case of error.
+ */
+int virGetHostUUID(unsigned char *uuid)
+{
+    int ret = 0;
+
+    if (!virUUIDIsValid(host_uuid))
+        ret = virSetHostUUIDStr(NULL);
+
+    memcpy(uuid, host_uuid, sizeof(host_uuid));
+
+    return ret;
+}
diff -rupN b/src/util/uuid.h c/src/util/uuid.h
--- b/src/util/uuid.h	2010-03-18 08:30:08.000000000 -0400
+++ c/src/util/uuid.h	2010-05-25 16:36:03.674438226 -0400
@@ -22,6 +22,11 @@
 #ifndef __VIR_UUID_H__
 # define __VIR_UUID_H__
 
+int virSetHostUUIDStr(const char *host_uuid);
+int virGetHostUUID(unsigned char *host_uuid);
+
+int virUUIDIsValid(unsigned char *uuid);
+
 int virUUIDGenerate(unsigned char *uuid);
 
 int virUUIDParse(const char *uuidstr,
diff -rupN b/tests/confdata/libvirtd.conf c/tests/confdata/libvirtd.conf
--- b/tests/confdata/libvirtd.conf	2009-12-22 04:37:57.000000000 -0500
+++ c/tests/confdata/libvirtd.conf	2010-05-25 16:36:03.675437812 -0400
@@ -218,3 +218,12 @@ tls_allowed_dn_list = ["DN1", "DN2"]
 #
 # By default, no Username's are checked
 sasl_allowed_username_list = ["joe@EXAMPLE.COM", "fred@EXAMPLE.COM" ]
+
+# UUID of the host:
+# Provide the UUID of the host here in case the command
+# 'dmidecode -s system-uuid' does not provide a valid uuid. In case
+# 'dmidecode' does not provide a valid UUID and none is provided here, a
+# temporary UUID will be generated.
+# Keep the format of the example UUID below.
+
+host_uuid = "8510b1a1-1afa-4da6-8111-785fae202c1e"
diff -rupN b/tests/confdata/libvirtd.out c/tests/confdata/libvirtd.out
--- b/tests/confdata/libvirtd.out	2009-12-22 04:37:57.000000000 -0500
+++ c/tests/confdata/libvirtd.out	2010-05-25 16:36:03.676437609 -0400
@@ -178,3 +178,10 @@ tls_allowed_dn_list = [ "DN1", "DN2" ]
 #
 # By default, no Username's are checked
 sasl_allowed_username_list = [ "joe@EXAMPLE.COM", "fred@EXAMPLE.COM" ]
+# UUID of the host:
+# Provide the UUID of the host here in case the command
+# 'dmidecode -s system-uuid' does not provide a valid uuid. In case
+# 'dmidecode' does not provide a valid UUID and none is provided here, a
+# temporary UUID will be generated.
+# Keep the format of the example UUID below.
+host_uuid = "8510b1a1-1afa-4da6-8111-785fae202c1e"
