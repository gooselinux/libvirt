From 4cfd7b5a7e36cab36dc90fe3235cbdf70861dc89 Mon Sep 17 00:00:00 2001
Message-Id: <4cfd7b5a7e36cab36dc90fe3235cbdf70861dc89.1299265003.git.jdenemar@redhat.com>
From: Eric Blake <eblake@redhat.com>
Date: Wed, 2 Mar 2011 11:50:08 -0700
Subject: [PATCH] qemu: avoid double close on domain restore

6.1: https://bugzilla.redhat.com/show_bug.cgi?id=672725
6.0.z: need z-stream bug spawned - regression introduced in
commit de5a60e, which was backported as Patch41 into 6.0.

qemudDomainSaveImageStartVM was evil - it closed the incoming fd
argument on some, but not all, code paths, without informing the
caller about that action.  No wonder that this resulted in
double-closes: https://bugzilla.redhat.com/show_bug.cgi?id=672725

* src/qemu/qemu_driver.c (qemudDomainSaveImageStartVM): Alter
signature, to avoid double-close.
(qemudDomainRestore, qemudDomainObjRestore): Update callers.
(cherry picked from commit 4f805dcdc433dc8799dc8a3b02bce813c3047656)

Conflicts:

	src/qemu/qemu_driver.c - deal with upstream qemu_process refactor
---
 src/qemu/qemu_driver.c |   30 ++++++++++++++++--------------
 1 files changed, 16 insertions(+), 14 deletions(-)

diff --git a/src/qemu/qemu_driver.c b/src/qemu/qemu_driver.c
index 73dec53..a7e7205 100644
--- a/src/qemu/qemu_driver.c
+++ b/src/qemu/qemu_driver.c
@@ -6162,8 +6162,8 @@ static int ATTRIBUTE_NONNULL(6)
 qemudDomainSaveImageStartVM(virConnectPtr conn,
                             struct qemud_driver *driver,
                             virDomainObjPtr vm,
-                            int fd,
-                            pid_t read_pid,
+                            int *fd,
+                            pid_t *read_pid,
                             const struct qemud_save_header *header,
                             const char *path)
 {
@@ -6187,20 +6187,21 @@ qemudDomainSaveImageStartVM(virConnectPtr conn,
 
         if (header->compressed != QEMUD_SAVE_FORMAT_RAW) {
             intermediate_argv[0] = prog;
-            intermediatefd = fd;
-            fd = -1;
+            intermediatefd = *fd;
+            *fd = -1;
             if (virExec(intermediate_argv, NULL, NULL,
-                        &intermediate_pid, intermediatefd, &fd, NULL, 0) < 0) {
+                        &intermediate_pid, intermediatefd, fd, NULL, 0) < 0) {
                 qemuReportError(VIR_ERR_INTERNAL_ERROR,
                                 _("Failed to start decompression binary %s"),
                                 intermediate_argv[0]);
+                *fd = intermediatefd;
                 goto out;
             }
         }
     }
 
     /* Set the migration source and start it up. */
-    ret = qemudStartVMDaemon(conn, driver, vm, "stdio", true, fd, path,
+    ret = qemudStartVMDaemon(conn, driver, vm, "stdio", true, *fd, path,
                              VIR_VM_OP_RESTORE);
 
     if (intermediate_pid != -1) {
@@ -6209,7 +6210,7 @@ qemudDomainSaveImageStartVM(virConnectPtr conn,
              * wait forever to write to stdout, so we must manually kill it.
              */
             VIR_FORCE_CLOSE(intermediatefd);
-            VIR_FORCE_CLOSE(fd);
+            VIR_FORCE_CLOSE(*fd);
             kill(intermediate_pid, SIGTERM);
         }
 
@@ -6221,9 +6222,9 @@ qemudDomainSaveImageStartVM(virConnectPtr conn,
     }
     VIR_FORCE_CLOSE(intermediatefd);
 
-    wait_ret = qemudDomainSaveImageClose(fd, read_pid, &status);
-    fd = -1;
-    if (read_pid != -1) {
+    wait_ret = qemudDomainSaveImageClose(*fd, *read_pid, &status);
+    *fd = -1;
+    if (*read_pid != -1) {
         if (wait_ret == -1) {
             virReportSystemError(errno,
                                  _("failed to wait for process reading '%s'"),
@@ -6244,6 +6245,7 @@ qemudDomainSaveImageStartVM(virConnectPtr conn,
             }
         }
     }
+    *read_pid = -1;
 
     if (ret < 0) {
         qemuDomainStartAudit(vm, "restored", false);
@@ -6314,8 +6316,8 @@ static int qemudDomainRestore(virConnectPtr conn,
     if (qemuDomainObjBeginJobWithDriver(driver, vm) < 0)
         goto cleanup;
 
-    ret = qemudDomainSaveImageStartVM(conn, driver, vm, fd,
-                                      read_pid, &header, path);
+    ret = qemudDomainSaveImageStartVM(conn, driver, vm, &fd,
+                                      &read_pid, &header, path);
 
     if (qemuDomainObjEndJob(vm) == 0)
         vm = NULL;
@@ -6365,8 +6367,8 @@ static int qemudDomainObjRestore(virConnectPtr conn,
     virDomainObjAssignDef(vm, def, true);
     def = NULL;
 
-    ret = qemudDomainSaveImageStartVM(conn, driver, vm, fd,
-                                      read_pid, &header, path);
+    ret = qemudDomainSaveImageStartVM(conn, driver, vm, &fd,
+                                      &read_pid, &header, path);
 
 cleanup:
     virDomainDefFree(def);
-- 
1.7.4.1

