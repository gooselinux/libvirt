Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=613764

In case qemu supports -nodefconfig, libvirt adds uses it when launching
new guests. Since this option may affect CPU models supported by qemu,
we need to use it when probing for available models.
(cherry picked from commit 4677b06428d54c6f7e6063e82313bc26f1677fd3)

RHEL-6 note: this shouldn't be an issue with RHEL-6 qemu-kvm since that
should include its CPU definitions regardless on -nodefconfig option
(although I'm not sure if the patch already made it into qemu-kvm
build). However with other versions of qemu, libvirt could decide to run
qemu with CPU model which is not loaded with -nodefconfig.
---
 src/qemu/qemu_conf.c |   16 ++++++++++++----
 src/qemu/qemu_conf.h |    1 +
 2 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/src/qemu/qemu_conf.c b/src/qemu/qemu_conf.c
index 75c57a1..01d9c2c 100644
--- a/src/qemu/qemu_conf.c
+++ b/src/qemu/qemu_conf.c
@@ -756,11 +756,17 @@ error:
 
 int
 qemudProbeCPUModels(const char *qemu,
+                    unsigned long long qemuCmdFlags,
                     const char *arch,
                     unsigned int *count,
                     const char ***cpus)
 {
-    const char *const qemuarg[] = { qemu, "-cpu", "?", NULL };
+    const char *const qemuarg[] = {
+        qemu,
+        "-cpu", "?",
+        (qemuCmdFlags & QEMUD_CMD_FLAG_NODEFCONFIG) ? "-nodefconfig" : NULL,
+        NULL
+    };
     const char *const qemuenv[] = { "LC_ALL=C", NULL };
     enum { MAX_MACHINES_OUTPUT_SIZE = 1024*4 };
     char *output = NULL;
@@ -954,7 +960,7 @@ qemudCapsInitGuest(virCapsPtr caps,
     guest->arch.defaultInfo.emulator_mtime = binary_mtime;
 
     if (caps->host.cpu &&
-        qemudProbeCPUModels(binary, info->arch, &ncpus, NULL) == 0 &&
+        qemudProbeCPUModels(binary, 0, info->arch, &ncpus, NULL) == 0 &&
         ncpus > 0 &&
         !virCapabilitiesAddGuestFeature(guest, "cpuselection", 1, 0))
         goto error;
@@ -3444,6 +3450,7 @@ static int
 qemuBuildCpuArgStr(const struct qemud_driver *driver,
                    const virDomainDefPtr def,
                    const char *emulator,
+                   unsigned long long qemuCmdFlags,
                    const struct utsname *ut,
                    char **opt)
 {
@@ -3457,7 +3464,8 @@ qemuBuildCpuArgStr(const struct qemud_driver *driver,
     int i;
 
     if (def->cpu && def->cpu->model) {
-        if (qemudProbeCPUModels(emulator, ut->machine, &ncpus, &cpus) < 0)
+        if (qemudProbeCPUModels(emulator, qemuCmdFlags, ut->machine,
+                                &ncpus, &cpus) < 0)
             goto cleanup;
 
         if (!ncpus || !host) {
@@ -3785,7 +3793,7 @@ int qemudBuildCommandLine(virConnectPtr conn,
         ADD_ARG_LIT(def->os.machine);
     }
 
-    if (qemuBuildCpuArgStr(driver, def, emulator, &ut, &cpu) < 0)
+    if (qemuBuildCpuArgStr(driver, def, emulator, qemuCmdFlags, &ut, &cpu) < 0)
         goto error;
 
     if (cpu) {
diff --git a/src/qemu/qemu_conf.h b/src/qemu/qemu_conf.h
index 4aeb804..c07ee2d 100644
--- a/src/qemu/qemu_conf.h
+++ b/src/qemu/qemu_conf.h
@@ -292,6 +292,7 @@ int         qemudProbeMachineTypes      (const char *binary,
                                          int *nmachines);
 
 int         qemudProbeCPUModels         (const char *qemu,
+                                         unsigned long long qemuCmdFlags,
                                          const char *arch,
                                          unsigned int *count,
                                          const char ***cpus);
-- 
1.7.1.1

