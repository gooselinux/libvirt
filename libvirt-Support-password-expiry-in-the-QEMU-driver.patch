From 2fb90dcdb854689f5f55379946e46a5617cc9700 Mon Sep 17 00:00:00 2001
Message-Id: <2fb90dcdb854689f5f55379946e46a5617cc9700.1294615754.git.jdenemar@redhat.com>
From: Daniel P. Berrange <berrange@redhat.com>
Date: Fri, 17 Dec 2010 14:55:28 +0100
Subject: [PATCH] Support password expiry in the QEMU driver

RHEL-6 only, no upstream

The RHEL6 build of QEMU has a custom monitor command that allows
an expiry time to be set. We try to use that command first when
setting a VNC/SPICE password. If that doesn't work we fallback
to the legacy VNC only password, and throw an error if they try
to use SPICE.

* src/qemu/qemu_monitor.c, src/qemu/qemu_monitor.h,
  src/qemu/qemu_monitor_json.c, src/qemu/qemu_monitor_json.h: Add
  support for __com.redhat_set_password
* src/qemu/qemu_driver.c, src/qemu/qemu_hotplug.c: Wire up SPICE/VNC
  passwords with expiry
---
 src/qemu/qemu_driver.c       |   22 +++++----
 src/qemu/qemu_hotplug.c      |  113 +++++++++++++++++++++++++++++++++++++++---
 src/qemu/qemu_hotplug.h      |    5 ++
 src/qemu/qemu_monitor.c      |   23 +++++++++
 src/qemu/qemu_monitor.h      |    5 ++
 src/qemu/qemu_monitor_json.c |   33 ++++++++++++
 src/qemu/qemu_monitor_json.h |    4 ++
 7 files changed, 187 insertions(+), 18 deletions(-)

diff --git a/src/qemu/qemu_driver.c b/src/qemu/qemu_driver.c
index e24ee41..071afdb 100644
--- a/src/qemu/qemu_driver.c
+++ b/src/qemu/qemu_driver.c
@@ -1999,16 +1999,18 @@ qemuInitPasswords(virConnectPtr conn,
     int ret = 0;
     qemuDomainObjPrivatePtr priv = vm->privateData;
 
-    if ((vm->def->ngraphics == 1) &&
-        vm->def->graphics[0]->type == VIR_DOMAIN_GRAPHICS_TYPE_VNC &&
-        (vm->def->graphics[0]->data.vnc.auth.passwd || driver->vncPassword)) {
-
-        qemuDomainObjEnterMonitorWithDriver(driver, vm);
-        ret = qemuMonitorSetVNCPassword(priv->mon,
-                                        vm->def->graphics[0]->data.vnc.auth.passwd ?
-                                        vm->def->graphics[0]->data.vnc.auth.passwd :
-                                        driver->vncPassword);
-        qemuDomainObjExitMonitorWithDriver(driver, vm);
+    if (vm->def->ngraphics == 1) {
+        if (vm->def->graphics[0]->type == VIR_DOMAIN_GRAPHICS_TYPE_VNC) {
+            ret = qemuInitGraphicsPasswords(driver, vm,
+                                            VIR_DOMAIN_GRAPHICS_TYPE_VNC,
+                                            &vm->def->graphics[0]->data.vnc.auth,
+                                            driver->vncPassword);
+        } else if (vm->def->graphics[0]->type == VIR_DOMAIN_GRAPHICS_TYPE_SPICE) {
+            ret = qemuInitGraphicsPasswords(driver, vm,
+                                            VIR_DOMAIN_GRAPHICS_TYPE_SPICE,
+                                            &vm->def->graphics[0]->data.vnc.auth,
+                                            driver->vncPassword);
+        }
     }
 
     if (ret < 0)
diff --git a/src/qemu/qemu_hotplug.c b/src/qemu/qemu_hotplug.c
index 827bcaf..0c492b9 100644
--- a/src/qemu/qemu_hotplug.c
+++ b/src/qemu/qemu_hotplug.c
@@ -1033,12 +1033,66 @@ static virDomainGraphicsDefPtr qemuDomainFindGraphics(virDomainObjPtr vm,
 
 
 int
+qemuInitGraphicsPasswords(struct qemud_driver *driver,
+                          virDomainObjPtr vm,
+                          int type,
+                          virDomainGraphicsAuthDefPtr auth,
+                          const char *defaultPasswd)
+{
+    qemuDomainObjPrivatePtr priv = vm->privateData;
+    time_t now = time(NULL);
+    time_t lifetime;
+    int ret;
+
+    if (!auth->passwd && !driver->vncPassword)
+        return 0;
+
+    if (auth->expires) {
+        lifetime = auth->validTo - now;
+        /* QEMU treats '0' as dont expire, so we need to force it to expire
+         * immediately */
+        if (lifetime == 0)
+            lifetime = -1;
+    } else {
+        lifetime = 0; /* don't expire */
+    }
+
+    qemuDomainObjEnterMonitorWithDriver(driver, vm);
+    ret = qemuMonitorSetGraphicsPassword(priv->mon,
+                                         type,
+                                         auth->passwd ? auth->passwd : defaultPasswd,
+                                         lifetime);
+
+    if (ret == -2) {
+        if (type != VIR_DOMAIN_GRAPHICS_TYPE_VNC) {
+            qemuReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+                            _("Only VNC graphics are supported"));
+            ret = -1;
+        }
+        /* XXX we could fake this with a timer */
+        if (auth->expires) {
+            qemuReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+                            _("Expiry of VNC passwords is not supported"));
+            ret = -1;
+        }
+    }
+
+    if (ret == -2)
+        ret = qemuMonitorSetVNCPassword(priv->mon,
+                                        auth->passwd ? auth->passwd : defaultPasswd);
+
+    qemuDomainObjExitMonitorWithDriver(driver, vm);
+
+    return ret;
+}
+
+
+int
 qemuDomainChangeGraphics(struct qemud_driver *driver,
                          virDomainObjPtr vm,
                          virDomainGraphicsDefPtr dev)
 {
     virDomainGraphicsDefPtr olddev = qemuDomainFindGraphics(vm, dev);
-    qemuDomainObjPrivatePtr priv = vm->privateData;
     int ret = -1;
 
     if (!olddev) {
@@ -1066,20 +1120,63 @@ qemuDomainChangeGraphics(struct qemud_driver *driver,
             return -1;
         }
 
-        if (STRNEQ_NULLABLE(olddev->data.vnc.auth.passwd, dev->data.vnc.auth.passwd)) {
+        /* If a password lifetime was, or is set, then we must always run,
+         * even if new password matches old password */
+        if (olddev->data.vnc.auth.expires ||
+            dev->data.vnc.auth.expires ||
+            STRNEQ_NULLABLE(olddev->data.vnc.auth.passwd, dev->data.vnc.auth.passwd)) {
             VIR_DEBUG("Updating password on VNC server %p %p", dev->data.vnc.auth.passwd, driver->vncPassword);
-            qemuDomainObjEnterMonitorWithDriver(driver, vm);
-            ret = qemuMonitorSetVNCPassword(priv->mon,
-                                            dev->data.vnc.auth.passwd ?
-                                            dev->data.vnc.auth.passwd :
-                                            driver->vncPassword);
-            qemuDomainObjExitMonitorWithDriver(driver, vm);
+            ret = qemuInitGraphicsPasswords(driver, vm, VIR_DOMAIN_GRAPHICS_TYPE_VNC,
+                                            &dev->data.vnc.auth, driver->vncPassword);
 
             /* Steal the new dev's  char * reference */
             VIR_FREE(olddev->data.vnc.auth.passwd);
             olddev->data.vnc.auth.passwd = dev->data.vnc.auth.passwd;
             dev->data.vnc.auth.passwd = NULL;
+            olddev->data.vnc.auth.validTo = dev->data.vnc.auth.validTo;
+            olddev->data.vnc.auth.expires = dev->data.vnc.auth.expires;
+        } else {
+            VIR_DEBUG0("Not updating since password didn't change");
+            ret = 0;
+        }
+        break;
+
+    case VIR_DOMAIN_GRAPHICS_TYPE_SPICE:
+        if ((olddev->data.spice.autoport != dev->data.spice.autoport) ||
+            (!dev->data.spice.autoport && (olddev->data.spice.port != dev->data.spice.port)) ||
+            (!dev->data.spice.autoport && (olddev->data.spice.tlsPort != dev->data.spice.tlsPort))) {
+            qemuReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+                            _("cannot change port settings on spice graphics"));
+            return -1;
+        }
+        if (STRNEQ_NULLABLE(olddev->data.spice.listenAddr, dev->data.spice.listenAddr)) {
+            qemuReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+                            _("cannot change listen address setting on spice graphics"));
+            return -1;
+        }
+        if (STRNEQ_NULLABLE(olddev->data.spice.keymap, dev->data.spice.keymap)) {
+            qemuReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+                            _("cannot change keymap setting on spice graphics"));
+            return -1;
+        }
+
+        /* If a password lifetime was, or is set, then we must always run,
+         * even if new password matches old password */
+        if (olddev->data.spice.auth.expires ||
+            dev->data.spice.auth.expires ||
+            STRNEQ_NULLABLE(olddev->data.spice.auth.passwd, dev->data.spice.auth.passwd)) {
+            VIR_DEBUG("Updating password on SPICE server %p %p", dev->data.spice.auth.passwd, driver->spicePassword);
+            ret = qemuInitGraphicsPasswords(driver, vm, VIR_DOMAIN_GRAPHICS_TYPE_SPICE,
+                                            &dev->data.spice.auth, driver->spicePassword);
+
+            /* Steal the new dev's  char * reference */
+            VIR_FREE(olddev->data.spice.auth.passwd);
+            olddev->data.spice.auth.passwd = dev->data.spice.auth.passwd;
+            dev->data.spice.auth.passwd = NULL;
+            olddev->data.spice.auth.validTo = dev->data.spice.auth.validTo;
+            olddev->data.spice.auth.expires = dev->data.spice.auth.expires;
         } else {
+            VIR_DEBUG0("Not updating since password didn't change");
             ret = 0;
         }
         break;
diff --git a/src/qemu/qemu_hotplug.h b/src/qemu/qemu_hotplug.h
index 0e7ca8e..1159a77 100644
--- a/src/qemu/qemu_hotplug.h
+++ b/src/qemu/qemu_hotplug.h
@@ -67,6 +67,11 @@ int qemuDomainAttachHostDevice(struct qemud_driver *driver,
                                virDomainObjPtr vm,
                                virDomainHostdevDefPtr hostdev,
                                unsigned long long qemuCmdFlags);
+int qemuInitGraphicsPasswords(struct qemud_driver *driver,
+                              virDomainObjPtr vm,
+                              int type,
+                              virDomainGraphicsAuthDefPtr auth,
+                              const char *defaultPasswd);
 int qemuDomainChangeGraphics(struct qemud_driver *driver,
                              virDomainObjPtr vm,
                              virDomainGraphicsDefPtr dev);
diff --git a/src/qemu/qemu_monitor.c b/src/qemu/qemu_monitor.c
index 6ad894d..6c0a94e 100644
--- a/src/qemu/qemu_monitor.c
+++ b/src/qemu/qemu_monitor.c
@@ -1094,6 +1094,29 @@ int qemuMonitorSetVNCPassword(qemuMonitorPtr mon,
         ret = qemuMonitorJSONSetVNCPassword(mon, password);
     else
         ret = qemuMonitorTextSetVNCPassword(mon, password);
+
+    return ret;
+}
+
+
+/* Returns -2 if not supported with this monitor connection */
+int qemuMonitorSetGraphicsPassword(qemuMonitorPtr mon,
+                                   int type,
+                                   const char *password,
+                                   unsigned int expiry)
+{
+    int ret;
+    DEBUG("mon=%p, fd=%d type=%d, password=%p, expiry=%u",
+          mon, mon->fd, type, password, expiry);
+
+    if (!password)
+        password = "";
+
+    if (mon->json)
+        ret = qemuMonitorJSONSetGraphicsPassword(mon, type, password, expiry);
+    else {
+        ret = -2;
+    }
     return ret;
 }
 
diff --git a/src/qemu/qemu_monitor.h b/src/qemu/qemu_monitor.h
index 3ac5024..bf467d0 100644
--- a/src/qemu/qemu_monitor.h
+++ b/src/qemu/qemu_monitor.h
@@ -195,6 +195,11 @@ int qemuMonitorGetBlockExtent(qemuMonitorPtr mon,
 
 int qemuMonitorSetVNCPassword(qemuMonitorPtr mon,
                               const char *password);
+int qemuMonitorSetGraphicsPassword(qemuMonitorPtr mon,
+                                   int type,
+                                   const char *password,
+                                   unsigned int expiry);
+
 int qemuMonitorSetBalloon(qemuMonitorPtr mon,
                           unsigned long newmem);
 int qemuMonitorSetCPU(qemuMonitorPtr mon, int cpu, int online);
diff --git a/src/qemu/qemu_monitor_json.c b/src/qemu/qemu_monitor_json.c
index 7877731..be9dfac 100644
--- a/src/qemu/qemu_monitor_json.c
+++ b/src/qemu/qemu_monitor_json.c
@@ -1265,6 +1265,39 @@ int qemuMonitorJSONSetVNCPassword(qemuMonitorPtr mon,
     return ret;
 }
 
+/* Returns -1 on error, -2 if not supported */
+int qemuMonitorJSONSetGraphicsPassword(qemuMonitorPtr mon,
+                                       int type,
+                                       const char *password,
+                                       unsigned int expiry)
+{
+    int ret = -1;
+    virJSONValuePtr cmd = qemuMonitorJSONMakeCommand("__com.redhat_set_password",
+                                                     "s:protocol", type == VIR_DOMAIN_GRAPHICS_TYPE_VNC ? "vnc" : "spice",
+                                                     "s:password", password,
+                                                     "i:expiration", (int)expiry,
+                                                     NULL);
+    virJSONValuePtr reply = NULL;
+    if (!cmd)
+        return -1;
+
+    ret = qemuMonitorJSONCommand(mon, cmd, &reply);
+
+    if (ret == 0) {
+        if (qemuMonitorJSONHasError(reply, "CommandNotFound")) {
+            ret = -2;
+            goto cleanup;
+        }
+
+        ret = qemuMonitorJSONCheckError(cmd, reply);
+    }
+
+cleanup:
+    virJSONValueFree(cmd);
+    virJSONValueFree(reply);
+    return ret;
+}
+
 /*
  * Returns: 0 if balloon not supported, +1 if balloon adjust worked
  * or -1 on failure
diff --git a/src/qemu/qemu_monitor_json.h b/src/qemu/qemu_monitor_json.h
index 8d96146..48b2e07 100644
--- a/src/qemu/qemu_monitor_json.h
+++ b/src/qemu/qemu_monitor_json.h
@@ -63,6 +63,10 @@ int qemuMonitorJSONGetBlockExtent(qemuMonitorPtr mon,
 
 int qemuMonitorJSONSetVNCPassword(qemuMonitorPtr mon,
                                   const char *password);
+int qemuMonitorJSONSetGraphicsPassword(qemuMonitorPtr mon,
+                                       int type,
+                                       const char *password,
+                                       unsigned int expiry);
 int qemuMonitorJSONSetBalloon(qemuMonitorPtr mon,
                               unsigned long newmem);
 int qemuMonitorJSONSetCPU(qemuMonitorPtr mon, int cpu, int online);
-- 
1.7.4.rc1

